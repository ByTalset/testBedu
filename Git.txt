¿Que es Git?
Es un sistema de control de versiones, un sistema de control de versiones o programa que controla o administra las distintas versiones de un programa.
¿Que es GitHub?
Es un sitio "Social coding". Te permite subir repositorios de código para almacenarlo en el sistema de control de versiones Git.

Conceptos basicos de Git:
Te provee una manera de poder seguir los cambios de tu codigo, tambien lo hace atraves de snapshots es decir te ayuda a tomar una captura de tu codigo, con esto podras volver  a verlo, copiarlo o alterarlo. 
Tambien te ayudara a tomar desiciones acerca de cuando realizar los cambios.

En Git hay tres estados;
1. Working directory: Aqui vamos a estar trabajando con todos nuestros archivos
2. Staging Area: Aqui vamos a ir agregando todos nuestros archivos que vamos a preparar para el guardado.
3. Repository: Aqui vamos a pasar todos nuestros archivos que ya estan listos para guardar.

Comandos basicos de Git:

pwd: Nos ayuda a visualizar la ruta de carpetas y archivos en los que nos encontramos en Git Bash

ls: Es un listado de todas las carpetas y archivos que se encuentran en dicha ruta.

.gitignore: Es un archivo el cual creamos para en ese escribir los nombres de archivos o carpetas que no queramos agregar a nuestro espacio de trabajo de Git.


 
                       FLUJO DE TRABAJO

git init: Nos ayuda a crear un proyecto nuevo o para indicar que vamos a iniciar un proyecto ya iniciado pero con Git.

git add " " o git add . (Este ultimo para agregar mas de un archivo): Es para pasar todos nuestros archivos de l working directory al staging area.

git status: Esto nos sirve para poder visualizar en que estado se encuentran todos nuestros archivos.

git commit o git commit -m " ": Nos sirve para pasar todos nuestros archivos desde el staging area al repositorio.


		            CLONANDO

git push: Nos sirve para subirlo a un repositorio remoto.

git pull: Nos proporciona todos los cambios que nos han hecho todos los desarrolladores involucrados en el proyecto.

git clone: Realiza una copia desde el serivor central a tu computador.

git remote add origin https://""/""/"".git: Este comando nos sirve para unir nuestra carpeta local de nuestra computadora a nuestro repositorio remoto en GitHub.

git push -u origin main: Este comando se encarga de empujar los cambios realizados en nuestro archivo local a nuestro repositorio en GithHub.



			   COMPARACIONES

git diff " ": Con este comando nosotros podemos notar las diferencias o cambios que hemos realizado en nuestro codigo.


			     REGISTROS

git log: Con este comando nosotros podemos visualizar todas las versiones o cambios que hemos realizado en nuestro archivo.


			        RAMAS

git checkout -- " ": Con este comando nosotros podemos revertir los cambios en nuestro codigo

git branch o git branch -l: Este comando nos sirve para listar las ramas o versiones existentes.

git branch "Nombre de la version que queremos crear": Con este comando nosotros creamos una version alternativa de nuestro archivo master.

git branch -m "Nombre que deseamos colocar": Con este comando nosotros renombramos una rama o version.

git branch -d "Nombre de la rama o version": Con este comando nosotros eliminaremos la rama o version que nos interese.

git checkout "Nombre de nuestra version alternativa que creamos": Con este comando nosotros podemos escoger sobre que version queremos trabajar.


                              MEZCLA DE RAMAS

git merge "Nombre de la version o rama a mezclar": Mezcla la rama que escribiste con la rama en la que estás. (Si hay un conflicto de mezcla, puede ser que tengas que meter mano al editor)

git rebase "Nombre de la version o rama": Para tener un seguimiento lineal sobrescribiendo la historia de nuestro código

git rebase -i "Nombre de la version o rama": Nos abre el editor para acceder a otras modalidades.
		          



